//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectorServer")]
public interface ProjectorServer
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/OpenDisplay", ReplyAction="http://tempuri.org/ProjectorServer/OpenDisplayResponse")]
    void OpenDisplay(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/OpenDisplay", ReplyAction="http://tempuri.org/ProjectorServer/OpenDisplayResponse")]
    System.Threading.Tasks.Task OpenDisplayAsync(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/Size", ReplyAction="http://tempuri.org/ProjectorServer/SizeResponse")]
    System.Drawing.Size Size(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/Size", ReplyAction="http://tempuri.org/ProjectorServer/SizeResponse")]
    System.Threading.Tasks.Task<System.Drawing.Size> SizeAsync(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/ScreenCount", ReplyAction="http://tempuri.org/ProjectorServer/ScreenCountResponse")]
    int ScreenCount();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/ScreenCount", ReplyAction="http://tempuri.org/ProjectorServer/ScreenCountResponse")]
    System.Threading.Tasks.Task<int> ScreenCountAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/SetColor", ReplyAction="http://tempuri.org/ProjectorServer/SetColorResponse")]
    void SetColor(int screenIndex, float r, float g, float b);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/SetColor", ReplyAction="http://tempuri.org/ProjectorServer/SetColorResponse")]
    System.Threading.Tasks.Task SetColorAsync(int screenIndex, float r, float g, float b);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/DisplayName", ReplyAction="http://tempuri.org/ProjectorServer/DisplayNameResponse")]
    void DisplayName(int screenIndex, string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/DisplayName", ReplyAction="http://tempuri.org/ProjectorServer/DisplayNameResponse")]
    System.Threading.Tasks.Task DisplayNameAsync(int screenIndex, string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/NumberOfGrayCodeImages", ReplyAction="http://tempuri.org/ProjectorServer/NumberOfGrayCodeImagesResponse")]
    int NumberOfGrayCodeImages(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/NumberOfGrayCodeImages", ReplyAction="http://tempuri.org/ProjectorServer/NumberOfGrayCodeImagesResponse")]
    System.Threading.Tasks.Task<int> NumberOfGrayCodeImagesAsync(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/DisplayGrayCode", ReplyAction="http://tempuri.org/ProjectorServer/DisplayGrayCodeResponse")]
    void DisplayGrayCode(int screenIndex, int i);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/DisplayGrayCode", ReplyAction="http://tempuri.org/ProjectorServer/DisplayGrayCodeResponse")]
    System.Threading.Tasks.Task DisplayGrayCodeAsync(int screenIndex, int i);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/CloseDisplay", ReplyAction="http://tempuri.org/ProjectorServer/CloseDisplayResponse")]
    void CloseDisplay(int screenIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectorServer/CloseDisplay", ReplyAction="http://tempuri.org/ProjectorServer/CloseDisplayResponse")]
    System.Threading.Tasks.Task CloseDisplayAsync(int screenIndex);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ProjectorServerChannel : ProjectorServer, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ProjectorServerClient : System.ServiceModel.ClientBase<ProjectorServer>, ProjectorServer
{
    
    public ProjectorServerClient()
    {
    }
    
    public ProjectorServerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ProjectorServerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProjectorServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProjectorServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void OpenDisplay(int screenIndex)
    {
        base.Channel.OpenDisplay(screenIndex);
    }
    
    public System.Threading.Tasks.Task OpenDisplayAsync(int screenIndex)
    {
        return base.Channel.OpenDisplayAsync(screenIndex);
    }
    
    public System.Drawing.Size Size(int screenIndex)
    {
        return base.Channel.Size(screenIndex);
    }
    
    public System.Threading.Tasks.Task<System.Drawing.Size> SizeAsync(int screenIndex)
    {
        return base.Channel.SizeAsync(screenIndex);
    }
    
    public int ScreenCount()
    {
        return base.Channel.ScreenCount();
    }
    
    public System.Threading.Tasks.Task<int> ScreenCountAsync()
    {
        return base.Channel.ScreenCountAsync();
    }
    
    public void SetColor(int screenIndex, float r, float g, float b)
    {
        base.Channel.SetColor(screenIndex, r, g, b);
    }
    
    public System.Threading.Tasks.Task SetColorAsync(int screenIndex, float r, float g, float b)
    {
        return base.Channel.SetColorAsync(screenIndex, r, g, b);
    }
    
    public void DisplayName(int screenIndex, string name)
    {
        base.Channel.DisplayName(screenIndex, name);
    }
    
    public System.Threading.Tasks.Task DisplayNameAsync(int screenIndex, string name)
    {
        return base.Channel.DisplayNameAsync(screenIndex, name);
    }
    
    public int NumberOfGrayCodeImages(int screenIndex)
    {
        return base.Channel.NumberOfGrayCodeImages(screenIndex);
    }
    
    public System.Threading.Tasks.Task<int> NumberOfGrayCodeImagesAsync(int screenIndex)
    {
        return base.Channel.NumberOfGrayCodeImagesAsync(screenIndex);
    }
    
    public void DisplayGrayCode(int screenIndex, int i)
    {
        base.Channel.DisplayGrayCode(screenIndex, i);
    }
    
    public System.Threading.Tasks.Task DisplayGrayCodeAsync(int screenIndex, int i)
    {
        return base.Channel.DisplayGrayCodeAsync(screenIndex, i);
    }
    
    public void CloseDisplay(int screenIndex)
    {
        base.Channel.CloseDisplay(screenIndex);
    }
    
    public System.Threading.Tasks.Task CloseDisplayAsync(int screenIndex)
    {
        return base.Channel.CloseDisplayAsync(screenIndex);
    }
}
